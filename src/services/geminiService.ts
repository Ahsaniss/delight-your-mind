import { GoogleGenerativeAI } from "@google/generative-ai";class GeminiService {  private genAI: GoogleGenerativeAI;  private model: any;  constructor() {    const apiKey = "AIzaSyBHaasqdGCN0ohoJx14lFsruYx-jC2TMu8";    this.genAI = new GoogleGenerativeAI(apiKey);    this.model = this.genAI.getGenerativeModel({ model: "gemini-1.5-flash" });  }  async generateResponse(prompt: string, agentPersonality?: string): Promise<string> {    try {      const fullPrompt = agentPersonality         ? `${agentPersonality}\n\nUser: ${prompt}\n\nPlease respond as this character in a natural, helpful way:`        : prompt;            const result = await this.model.generateContent(fullPrompt);      const response = result.response;      const text = response.text();            if (!text || text.trim() === '') {        throw new Error("Empty response from Gemini");      }            return text.trim();    } catch (error: any) {      if (error.message?.includes('API key') || error.message?.includes('401')) {        throw new Error("API key issue - please check your Gemini API key");      } else if (error.message?.includes('quota') || error.message?.includes('429')) {        throw new Error("API quota exceeded - please try again later");      } else if (error.message?.includes('403')) {        throw new Error("API access forbidden - check your API key permissions");      } else {        throw new Error(`AI service temporarily unavailable - ${error.message}`);      }    }  }}export const geminiService = new GeminiService();